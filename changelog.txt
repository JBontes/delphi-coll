========================
=  Major Release: 1.2  =
========================
    * New unit Collections.Serialization. Includes:
       1. TSerializer - a semi-abstract class that implementes generic serialization.
       2. TDeserializer - a semi-abstract class that implements generic deserialization.
       3. ISerializable - an interface can be implemented by classes that need to override the default serialization.
       4. TInputContext/TOutputContext - two facade objects that only expose a few operations to classes through ISerializable.
       5. [NonSerializable] - the attribute to marks field that should not be serialized.
       6. Two concrete implementations for serialization in implementation section!
    * Some documentation fixes all over the place.
    * Removed the ICollectionMap<TKey, TValue>. It made no sense in the heirarchy. Its methods were split between
      the two interfaces that inherited it.
    * Added a new interface ILinkedList<T> currently implemented by TLinkedList<T> and TSortedLinkedList<T>.
    * Removed Copy() methods from TList<T>.
    * Removed sorting, reversing and copy methods from TLinkedList<T>. That was a mistake anyway.
    * Added TAbstractSet<T> from which all sets derive.
    * Added TAbstractStack<T> from which all stacks derive.
    * Added TAbstractQueue<T> from which all queues derive.
    * Added TAbstractDictionary<T> from which all dictionaries derive. This allowed us to remove a lot of duplicated code.
    * Added TAbstractList<T> which which TList<T> derives.
    * Added TAbstractLinkedList<T> derived from TAbstractList<T> which which TLisnkedList<T> derives.
    * TSortedList<T> extends TList<T> now while TSortedLinkedList<T> extends TLinkedList<T>. Removed a lot of duplicated code.
    * TLinkedList<T> and TSortedLinkedList<T> implement IQueue<T> and IStack<T>. A linked list can be used as both these collections
      transparently.
    * TCollection<T> base class supports versioning out of the box.
    * TEnumerator<T> base class was completely revamped. It is not much more simple to extend and also provides version checkin
      out of the box.
    * TForwardingEnumerator<T> is a special class that uses another enumerator as base.
    * Renamed IEnexGroupingCollection<TKey, T> into simply IGrouping<TKey, T>.
    * Rewritten all enumerators in the package to use the new interface.
    * Introduced a new non-generic TCollection.
    
﻿========================
= Minor Release: 1.1.1 =
========================
                                                                                             
    * All lists and dictionaries now posses a ExtractAt or Extract or ExtractKey, ExtractValue methods.
      These function exactly as remove but do not trigger cleanup for objects.
	* Fix: TObjectMultiMap required a class for it's value type parameter.
	* Fix: RemoveKey/RemoveValue for Bidi dictionaries were not calling the cleaning handler.

﻿========================
=  Major Release: 1.1  =
========================
    * Started a new project: Samples. A few samples have been added for your delight.
    * Implement T(Object)LinkedDictionary<TKey, TValue> that used a hash/linked list approach.
      Guarantees insert order preservation of elements.
    * Implement T(Object)LinkedSet<T> that used a hash/linked list approach.
      Guarantees insert order preservation of elements.
    * TBitSet, a new Word-only type that uses an internal array of bits.
    * New unit Collection.BidiDictionaries contains a number of dictionary types that enforce both key to value and value to key rules.
      + TBidiDictionary<TKey, TValue>
      + TSortedBidiDictionary<TKey, TValue>
      + TDoubleSortedDictionary<TKey, TValue>
    * Added a new unit Collections.Dynamic. This unit exposes a simple Member record that
      allows generating selectors for class/record members.
    * TView is a small type that can hold a number of fields/properties from a object or record. Looak at it as anonymous classes in C#.
      It's not that pretty but it does the job in some cases.
    * Implement T(Object)SortedLinkedList<T>. This class uses a linked list to store its elements. It also
      implements IList interface and provides access to the index based functions (slow).      
    * Add ISortedSet<T> interface now implemented by TSortedSet<T>.
    * Added three new overloads to Op.Select (one with preset output type, one for TValue output and one for TView output).
    * New GroupedBy<T>() extended operation and IEnexGroupingCollection<TKey, T>.
    * Removed IUnorderedList<T>. All lists implement IList<T> now (that includes Insert!).
    * IList<T> now includes Insert().
    * Renamed IOrderedList<T> into ISortedList<T>.
    * TLinkedStack<T> now uses an internal linked list and not the much "loved" TLinkedList class. This should
      bring quite some speed improvements into the game.
    * TLinkedQueue<T> now uses an internal linked list and not the much "loved" TLinkedList class. This should
      bring quite some speed improvements into the game.
    * TLinkedList<T> was completely rewritten. It's no longer .NET-like, it looks just like a simple TList<T> but
      stores its elements in a linked list. A lot of indexing methods are supported but are dead slow!
    * TArraySet<T> is not a sorted set. It's been optimized.
    * TSortedList<T>'s methods have been optimized to use binary search.
    * Optimized TList<T>.Add(collection) a lot. Should be a big boost to all dependant functions.
    * Updated multiple tests. Add missing test cases for TArraySet<T>.
    * Fixed a few bugs related to IndexOf in empty collections. Regression tests added.
    * Fixed an error in TDictionary<TKey, TValue> and THastSet<T> where initial capacity size was set to zero.
    * Fixed TSortedList.Copy to also copy the ascending/descending flag from the original list.
    * Fixed some documentation (removed "cleaning" references).
    * Fixed a bug in all dictionary implementations related to the way values were replaced. Memory leaks would appear. Regression tests added.
    * Fixed a bug in all list implementations related to the way values were replaced. Memory leaks would appear. Regression tests added.

========================
= Minor Release: 1.0.1 =
======================== 

    * Do not expose AreEqual, Compare and GetHashCode in TRules<T>.
    * Add protected methods ElementsAreEqual, CompareElements, GetElementHashCode
      to TEnexCollection<T>.
    * Add protected methods KeysAreEqual, CompareKeys, GetKeyHashCode
      to TEnexAssociativeCollection<TKey, TValue>.
    * Add protected methods ValuessAreEqual, CompareValues, GetValueHashCode
      to TEnexAssociativeCollection<TKey, TValue>.
    * Do not use ElementRules, KeyRules and ValueRules in code directly.
    * Define EArgumentNilException if RTL version is less than 22 (2010).
    * Fixed grammar and spelling errors (by Denisa Ilascu).
 
========================
=  Major Release: 1.0  =
======================== 

    * First public version!
    * The following units are provided
      + Collections.Base
      + Collections.Lists
      + Collections.Queues
      + Collections.Stacks
      + Collections.Sets
      + Collections.Dictionaries
      + Collections.Bags
      + Collections.MultiMaps
      + Collections.BidiMaps
    * Documentation is up
    * Everything is tested.
